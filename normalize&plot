import copy
import librosa 
import glob
import os
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt

def get_wav_path(file_pathname):
    path_spk_list = []
    file_pathname = file_pathname + '\\'
    for filename in os.listdir(file_pathname):
        path = os.path.join(file_pathname, filename)
        if 'observer' not in filename:
            if 'new' not in filename:
                if 'meeting.wav' in filename: 
                    path_spk_list.append(file_pathname + filename) 
                    # print(path_spk_list)
    return path_spk_list

def get_json_path(file_pathname):
    path_spk_list = []
    file_pathname = file_pathname + '\\'
    for filename in os.listdir(file_pathname):
        path = os.path.join(file_pathname, filename)
        if 'observer' not in filename:
            if 'new' not in filename:
                if 'meeting.json' in filename: 
                    path_spk_list.append(file_pathname + filename) 
    return path_spk_list

path_obs_json = glob.glob(r"F:\Work\Ernie\sounds_Align\sounds_file\*observer*new.json")
path_obs_out_1 = (r"F:\Work\Ernie\sounds_Align\transcript_split_obs")
path_spk_out_1 = (r"F:\Work\Ernie\sounds_Align\transcript_split_spk_1")

path_spk_list = get_wav_path(r"F:\Work\Ernie\sounds_Align\sounds_file") # Open voice of one speaker
path_obs_list = glob.glob(r"F:\Work\Ernie\sounds_Align\sounds_file\*observer*[!new]meeting_1.wav")  # Open voice of all people

for path_spk in path_spk_list:
    data_spk, sr_spk = librosa.load(path_spk, sr=None)
for path_obs in path_obs_list:
    data_obs, sr_obs = librosa.load(path_obs, sr=None)

def normalize(path_obs_index, path_spk_index):
    
    obs_wave = r'F:\Work\Ernie\sounds_Align\transcript_split_obs\obs_' + str (path_obs_index) +r'_.wav'
    spk_wave = r'F:\Work\Ernie\sounds_Align\transcript_split_spk_1\spk_' + str (path_spk_index) +r'_.wav'
    
    fs, data_obs = wavfile.read(obs_wave)
    fs, data_spk = wavfile.read(spk_wave)

    xx = copy.deepcopy(data_obs)
    xx = xx - np.mean(xx)     # 消除直流分量
    x_obs = xx/np.max(np.abs(xx)) # 幅值归一化
    xx = copy.deepcopy(data_spk)
    xx = xx - np.mean(xx)     
    x_spk = xx/np.max(np.abs(xx)) 

    plt.figure(dpi=500)
    plt.subplot(2,1,1)
    # plt.plot(data_obs, color='blue', label='original wave')
    # plt.subplot(2,1,2)
    plt.plot(x_obs, color='red', label='obs wave', linewidth = 0.1)
    plt.plot(x_spk, color='blue', label='spk wave', linewidth = 0.1)
    plt.legend() # 显示图例

transcript_plot = (r"F:\Work\Ernie\sounds_Align\transcript_plot")

for index in range(1,85):
    if index <= 84:
        normalize(index, index)
        plt.savefig(transcript_plot + './' + str (index) + '.jpg')
        index += 1
